
Добавим следующий класс User в проект:

public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string? Email { get; set; }
    public string Role { get; set; }
}

Важно наличие поля Id, поскольку Entity Framework требует определения 
ключа элемента для создания первичного ключа в таблице в БД. 
По умолчанию при генерации БД EF в качестве первичных ключей будет 
рассматривать свойства с именами Id или [Имя_класса]Id (то есть UserId).

///////////////////////
Контекст данных
///////////////////////

Взаимодействие с базой данных в Entity Framework Core 
происходит посредством специального класса — контекста данных. 
Поэтому добавим в наш проект новый класс, который назовем AppContext. 
Он будет иметь следующий код:

using Microsoft.EntityFrameworkCore;

namespace FirstApp
{
    public class AppContext : DbContext
    {
        // Объекты таблицы Users
        public DbSet<User> Users { get; set; }

        public AppContext()
        {
            Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Ваша строка подключения к БД");
        }
    }
}

Рассмотрим основные элементы данного контекста:

DbContext: определяет контекст данных, используемый для взаимодействия с базой данных, 
и является базовым классом для создаваемого контекста вашего приложения.
DbSet<T>: представляет набор объектов типа T, которые хранятся в определенной таблице БД.
OnConfiguring: переопределенный метод для настройки подключения к БД.
Для настройки подключения нужно в методе OnConfiguring вызвать метод UseSqlServer, 
передав в него строку подключения к созданной БД.

////////////
ИСПОЛЬЗОВАНИЕ и ДОБАВЛЕНИЕ
//////////////

Поскольку DbContext реализует интерфейс IDisposable, 
мы можем использовать конструкцию using. Обернём создание контекста в using:

static void Main(string[] args)
{
    using (var db = new AppContext())
    {
        var user1 = new User { Name = "Arthur", Role = "Admin" };
        var user2 = new User { Name = "klim", Role = "User" };

        db.Users.Add(user1);
        db.Users.Add(user2);
        db.SaveChanges();
    }
}

///////////
УДАЛЕНИЕ
/////////////


Для того чтобы удалить пользователей из БД, используются методы Remove и RemoveRange, 
которые принимают объекты. То есть мы можем удалить только того пользователя, 
данные о котором у нас уже есть. Например, после вызова метода SaveChanges в 
предыдущем коде мы хотим удалить третьего добавленного пользователя, нам потребуется выполнить следующий код:

db.Users.Remove(user3);
db.SaveChanges();


///////////////
ПОИСК НУЖНОГО
///////////////

Для того чтобы выбрать из базы объекты, которые не были созданы непосредственно 
в данной части кода, можно выбрать их непосредственно из контекста. 
Например, из коллекции Users мы можем выбрать как всех пользователей, так и соответствующих определенному условию:

// Выбор всех пользователей
var allUsersd = db.Users.ToList();

// Выбор пользователей с ролью "Admin"
var admins = db.Users.Where(user => user.Role == "Admin").ToList();

Для окончания запроса мы используем метод ToList(), который отправляет 
запрос непосредственно в БД и возвращает результат в виде коллекции типа List<T>, где T — тип объекта, который мы хотим получить.


/////////
ИЗМЕНЕНИЕ
/////////

Далее мы хотим изменить одну из них. Здесь можно применить метод FirstOrDefault(), чтобы выбрать первую строку из БД:

// Выбор первого пользователя в таблице
var firstUser = db.Users.FirstOrDefault();

ORM позволяет нам работать с объектами, а значит, и изменять нужно сам объект. 
То есть изменять поля у firstUser. Для внесения изменений в БД нам следует сохранить изменения:

firstUser.Email = "simpleemail@gmail.com";
db.SaveChanges();


///////////////////////////
Запросы в коде к БД
//////////////////////////

// Создаем контекст для выбора данных
    using (var db = new AppContext())
    {
	*** Запрос к БД
        var usersQuery =
            from user in db.Users
            where user.CompanyId == 2
            select user;

        var users = usersQuery.ToList();

        foreach (var user in users)
        {
            // Вывод Id пользователей
            Console.WriteLine(user.Id);
        }

var usersQuery =
    from user in db.Users.Include(u => u.Company)
    where user.CompanyId == 2
    select user;
-- Тут будут уже данные с 2х таблиц

Или с помощью LINQ:

var usersQuery = db.Users.Where(u => u.CompanyId == 2);

Если нужно включить ещё какую-то таблицу то пишем Include

var usersQuery = db.Users.Include(u => u.Company).Where(u => u.CompanyId == 2);

/////////////////////////////////////
Команды LINQ

Рассмотрим ниже основные LINQ-методы, которые могут вам пригодиться. 

All-------------Возвращает true, если все элементы набора удовлетворяют условию.
Any-------------Возвращает true, если хотя бы один элемент набора определенному условию.
Contains--------Определяет, содержит ли набор определенный элемент.
Count-----------Подсчитывает количество элементов в наборе.
First-----------Выбирает первый элемент коллекции.
FirstOrDefault--Выбирает первый элемент коллекции или возвращает значение по умолчанию.
Select----------Определяет проекцию выбранных значений, то есть преобразовывает данные в соответствии с переданным делегатом.
Where-----------Определяет фильтр выборки.
OrderBy---------Упорядочивает элементы по возрастанию.
OrderByDescending-Упорядочивает элементы по убыванию.
Join------------Соединяет два набора по определенному признаку.
GroupBy---------Группирует элементы по ключу.
Sum-------------Подсчитывает сумму числовых значений, которые выбираются согласно делегату.
Min-------------Находит минимальное значение из таких значений, которые выбираются согласно делегату.
Max-------------Находит максимальное значение из таких значений, которые выбираются согласно делегату.
ToList----------Преобразовывает коллекцию в список.


var usersQuery =
                    from user in db.Users
                    where user.CompanyId == 2
                    select user;

                var users = db.Users.Where(v => v.CompanyId == 2);

                var userCompany = db.Users.Select(v => v.Company);

                var firstUser = db.Users.First();

                var joinedCompanies = db.Users.Join(db.Companies, c => c.CompanyId, p => p.Id, (p, c) => new { CompanyName = c.Name });

                var sumCompanies = db.Users.Sum(v => v.CompanyId);


Примеры использования



